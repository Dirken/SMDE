ctry <- as.character(marathon$Country)
europe <- c('AND', 'AUT', 'BEL', 'BUL', 'CRO', 'CZE', 'DEN', 'ESA',
'ESP', 'EST', 'FIN', 'FRA', 'GBR', 'GER', 'GRE', 'GRN',
'HUN', 'ISR', 'IRL', 'ISL', 'ITA', 'LAT', 'LTU', 'LUX',
'MLT', 'NED', 'NOR', 'POL', 'POR', 'ROU', 'RSA', 'RUS',
'SLO', 'SMR', 'SRB', 'SVK', 'SWE', 'TUR', 'UAE', 'UKR',
'BLR', 'CYP', 'LIE', 'VGB', 'ALB')
sout.america <- c('ARG', 'BRA', 'CAY', 'CHI', 'COL', 'CRC', 'DOM',
'ECU', 'FLK', 'GUA', 'HON', 'JAM', 'MEX', 'PAN',
'PAR', 'PER', 'SUI', 'TCA', 'TRI', 'URU', 'VEN',
'BAR', 'BER', 'AHO', 'BAH')
africa <- c('ALG', 'BDI', 'EGY', 'ETH', 'KEN', 'KUW', 'MAR', 'MAS',
'NGR', 'ZIM', 'OMA', 'QAT', 'UGA', 'JOR')
asia <- c('CHN', 'HKG', 'INA', 'IND', 'JPN', 'KOR', 'KSA', 'MGL',
'NCA', 'PHI', 'SIN', 'THA', 'TWN', 'TPE', 'VIE', 'PAK')
oceania <- c('AUS', 'BRN', 'NZL')
ctry[sapply(ctry, is.element, europe)] <- 'Europe'
ctry[sapply(ctry, is.element, sout.america)] <- 'Sout-America'
ctry[sapply(ctry, is.element, africa)] <- 'Africa'
ctry[sapply(ctry, is.element, asia)] <- 'Asia'
ctry[sapply(ctry, is.element, oceania)] <- 'Oceania'
ctry[ctry == 'CAN'] <- 'Canada'
pace <- (as.seconds(marathon$Official.Time)/60)/42
pace <- cut(pace, c(3, 3.5, 4.5, 6, 12))
levels(pace) <- c('Pro', 'Semi-Pro', 'Amateur', 'Casual')
temp <- factor()
levels(temp) <- c('>=20', '<20')
weather <- factor()
levels(weather) <- c('Sunny', 'Rainy')
if (year == 2015) {
temp <- '<20'
weather <- 'Rainy'
} else if (year == 2016) {
temp <- '<20'
weather <- 'Sunny'
} else if (year == 2017) {
temp <- '>=20'
weather <- 'Sunny'
} else stop('Invalid year: ', year)
data.frame(Age=cut(marathon$Age, c(10, 30, 40, 50, 60, 90)),
Gender=marathon$M.F,
From=ctry,
Level=pace,
Temp=temp,
Weather=weather,
X5K=as.seconds(marathon$X5K),
X10K=as.seconds(marathon$X10K),
X15K=as.seconds(marathon$X15K),
X20K=as.seconds(marathon$X20K),
Half=as.seconds(marathon$Half),
X25K=as.seconds(marathon$X25K),
X30K=as.seconds(marathon$X30K),
X35K=as.seconds(marathon$X35K),
X40K=as.seconds(marathon$X40K),
Time=as.seconds(marathon$Official.Time))
}
m1 <- process.file(2015)
m2 <- process.file(2016)
m3 <- process.file(2017)
m <- rbind(m1, m2, m3)
ind <- sort(m$Time, index.return=TRUE)$ix
m <- m[ind,]
rownames(m) <- 1:nrow(m)
m
}
build.model <- function(dataFromMarathon) {
list(f5=lm(X5K ~ Age + Gender, data=dataFromMarathon),
f10=lm(X10K ~ Age + Gender + X5K, data=dataFromMarathon),
f15=lm(X15K ~ Age + Gender + From + Level + Temp + Weather + X5K + X10K, data=dataFromMarathon),
f20=lm(X20K ~ Age + Gender + From + Level + Temp + Weather + X5K + X10K + X15K, data=dataFromMarathon),
fHalf=lm(Half ~ Age + Gender + From + Level + Temp + Weather + X5K + X10K + X15K + X20K, data=dataFromMarathon),
f25=lm(X25K ~ Age + Gender + From + Level + Temp + Weather + X5K + X10K + X15K + X20K + Half, data=dataFromMarathon),
f30=lm(X30K ~ Age + Gender + From + Level + Temp + Weather + X5K + X10K + X15K + X20K + Half + X25K, data=dataFromMarathon),
f35=lm(X35K ~ Age + Gender + From + Level + Temp + Weather + X5K + X10K + X15K + X20K + Half + X25K + X30K, data=dataFromMarathon),
f40=lm(X40K ~ Age + Gender + From + Level + Temp + Weather + X5K + X10K + X15K + X20K + Half + X25K + X30K + X35K, data=dataFromMarathon),
fTime=lm(Time ~ ., data=dataFromMarathon))
}
simulate <- function(model, A, G, Fr, L, Tp, W) {
runner <- data.frame(Age=A, Gender=G, From=Fr,
Level=L, Temp=Tp, Weather=W)
runner$X5K <- predict(model$f5, runner)
runner$X10K <- predict(model$f10, runner)
runner$X15K <- predict(model$f15, runner)
runner$X20K <- predict(model$f20, runner)
runner$Half <- predict(model$fHalf, runner)
runner$X25K <- predict(model$f25, runner)
runner$X30K <- predict(model$f30, runner)
runner$X35K <- predict(model$f35, runner)
runner$X40K <- predict(model$f40, runner)
t <- predict(model$fTime, runner) + rnorm(1, sd=60)
as.integer(t)
}
run.simulation <- function(model, A, G, Fr, L, Tp, W, n, alpha, h_new) {
sims <- replicate(n, {
simulate(model, A, G, Fr, L, Tp, W)
})
h <- dt(1-alpha/2, n-1)*sd(sims)/sqrt(n)
n_new <- ceiling(n*(h/h_new)^2)
if (n_new - n >= 1) {
sims2 <- replicate(max(0, n_new - n), {
simulate(model, A, G, Fr, L, Tp, W)
})
sims <- c(sims, sims2)
}
as.integer(mean(sims))
}
experiment.binary <- function(model) {
n <- 50
alpha <- 0.05
h_new <- 0.5
range <- c(-1, 1)
Age <- c('(10,30]', '(60,90]')
Gender <- c('M', 'F')
Level <- c('Pro', 'Casual')
Temp <- c('<20', '>=20')
Weather <- c('Rainy', 'Sunny')
S <- lapply(range, function(A) {
lapply(range, function(G) {
lapply(range, function(L) {
lapply(range, function(Tp) {
lapply(range, function(W) {
s <- run.simulation(model,
Age[A], Gender[G],
'USA', Level[L],
Temp[Tp], Weather[W],
n, alpha, h_new)
names(s) <- paste0(ifelse(A == 1, '+', '-'),
ifelse(G == 1, '+', '-'),
ifelse(L == 1, '+', '-'),
ifelse(Tp == 1, '+', '-'),
ifelse(W == 1, '+', '-'))
s
})
})
})
})
})
S <- c(S, recursive=TRUE)
df <- data.frame(Seconds=S, Hours=as.hours(S))
write.csv2(df, 'simulations.csv')
}
experiment.Level <- function(model) {
#Best Gender, Temp and Weather
n <- 50
alpha <- 0.05
h_new <- 0.5
Level <- c('Pro', 'Semi-Pro', 'Amateur', 'Casual')
S <- lapply(Level, function(L) {
s <- run.simulation(model,
'(10,30]', 'M',
'Africa', L,
'<20', 'Rainy',
n, alpha, h_new)
names(s) <- L
s
})
S <- c(S, recursive=TRUE)
df <- data.frame(Seconds=S, Hours=as.hours(S))
write.csv2(df, 'simulations2.csv')
}
experiment.Age <- function(model) {
#Best Gender, Temp, Weather and Level
n <- 50
alpha <- 0.05
h_new <- 0.5
Age <- c('(10,30]', '(30,40]', '(40,50]', '(50,60]', '(60,90]')
S <- lapply(Age, function(A) {
s <- run.simulation(model,
A, 'M',
'Africa', 'Pro',
'<20', 'Rainy',
n, alpha, h_new)
names(s) <- A
s
})
S <- c(S, recursive=TRUE)
df <- data.frame(Seconds=S, Hours=as.hours(S))
write.csv2(df, 'simulations3.csv')
}
experiment.From <- function(model) {
#Best Gender, Temp, Weather, Level and Age
n <- 50
alpha <- 0.05
h_new <- 0.5
From <- c('USA', 'Canada', 'Europe', 'Sout-America', 'Africa', 'Asia', 'Oceania')
S <- lapply(From, function(Fr) {
s <- run.simulation(model,
'(10,30]', 'M',
Fr, 'Pro',
'<20', 'Rainy',
n, alpha, h_new)
names(s) <- Fr
s
})
S <- c(S, recursive=TRUE)
df <- data.frame(Seconds=S, Hours=as.hours(S))
write.csv2(df, 'simulations4.csv')
}
marathon <- load.data()
model <- build.model(marathon)
experiment.binary(model)
setwd("C:/Users/Meyerhofer/Desktop/SMDELabs/SMDE-2/dataset/")
getDataMarathon <- function(){
#We read all datasets we have in our folder
files <- list.files(pattern="*.csv")
marathonData <- lapply(files, read.csv)
#we normalize the data columns and names
marathonData[[1]]$X <- NULL
marathonData[[3]]$X <- NULL
names(marathonData[[2]])[names(marathonData[[2]]) == "X"] <- "X.1"
#Meteorogical conditions on the day of the race
marathonData[[1]]$Clima <- as.factor('Rain')
marathonData[[2]]$Clima <- as.factor('Sun')
marathonData[[3]]$Clima <- as.factor('Sun')
#We join them in a single dataframe
marathonData <- do.call("rbind", marathonData)
#we pre-process this data as follows:
#first we sort the data by finishing time, but prior to that we convert it.
library(lubridate)
marathonData$Official.Time <- as.numeric(hms(marathonData$Official.Time))
sortedIndexes <- sort.int(marathonData$Official.Time, index.return = T)$ix
marathonData <- marathonData[sortedIndexes, ]
rownames(marathonData) <- 1:nrow(marathonData)
#Converting time variables
marathonData$X5K <- as.numeric(hms(marathonData$X5K))
marathonData$X10K <- as.numeric(hms(marathonData$X10K))
marathonData$X15K <- as.numeric(hms(marathonData$X15K))
marathonData$X20K <- as.numeric(hms(marathonData$X20K))
marathonData$Half <- as.numeric(hms(marathonData$Half))
marathonData$X25K <- as.numeric(hms(marathonData$X25K))
marathonData$X30K <- as.numeric(hms(marathonData$X30K))
marathonData$X35K <- as.numeric(hms(marathonData$X35K))
marathonData$X40K <- as.numeric(hms(marathonData$X40K))
marathonData$Proj.Time <- as.numeric(hms(marathonData$Proj.Time))
marathonData$Pace <- as.numeric(hms(marathonData$Pace))
#Is it from Boston?
marathonData$Local <- as.factor(ifelse(marathonData$City == "Boston", "Boston", "NoBoston"))
#Is it from USA?
marathonData$LocalCountry <-  as.factor(ifelse(marathonData$Country == "USA", "USA", "NoUsa"))
#Is it from Africa?
africa <- c('ALG', 'BDI', 'EGY',
'ETH','JOR' ,'KEN',
'KUW', 'MAR', 'MAS',
'NGR', 'OMA', 'QAT',
'UGA', 'ZIM')
marathonData$African <- as.factor(ifelse(marathonData$Country %in% africa, "Africa", "NoAfrica"))
#classification by age
minAge <- min(marathonData$Age)
maxAge <- max(marathonData$Age)
ages <- seq(from=minAge, to=maxAge, by=10)
marathonData$Age <-  cut(marathonData$Age, ages)
#Classification by paces
paces <- seq(from=min(marathonData$Pace), to=max(marathonData$Pace), by=30)
marathonData$Pace <- cut(marathonData$Pace, paces)
#Discard variables we are not going to use:
marathonData$Gender <- NULL
marathonData$Overall <- NULL
marathonData$Division <- NULL
marathonData$Proj.Time  <- NULL
na.omit(marathonData)
}
createModel <- function(dataFromMarathon){
list(predX5=lm(X5K ~ Age + M.F + Clima + Local
+ African, data=dataFromMarathon),
predX10=lm(X10K ~ Age + M.F + Clima + Local
+ African +  X5K, data=dataFromMarathon),
predX15=lm(X15K ~ Age + M.F + Clima + Local
+ African + X5K + X10K, data=dataFromMarathon),
predX20=lm(X20K ~ Age + M.F + Clima + Local
+ African + X5K + X10K + X15K, data=dataFromMarathon),
predXHalf=lm(Half ~ Age + M.F + Clima + Local
+ African + X5K + X10K + X15K + X20K, data=dataFromMarathon),
predX25=lm(X25K ~ Age + M.F + Clima + Local
+ African + X5K + X10K + X15K + X20K + Half, data=dataFromMarathon),
predX30=lm(X30K ~ Age + M.F + Clima + Local
+ African + X5K + X10K + X15K + X20K + Half + X25K, data=dataFromMarathon),
predX35=lm(X35K ~ Age + M.F + Clima + Local
+ African + X5K + X10K + X15K + X20K + Half + X25K + X30K, data=dataFromMarathon),
predX40=lm(X40K ~ Age + M.F + Clima + Local
+ African + X5K + X10K + X15K + X20K + Half + X25K + X30K + X35K, data=dataFromMarathon),
predFTime=lm(Official.Time ~ Age + M.F + Clima + Local
+ African + X5K + X10K + X15K + X20K + Half + X25K + X30K + X35K +X40K, data=dataFromMarathon)
)
}
simulateExp <- function(model, age, sex, clima, fromBoston, fromAfrica, times, alpha, h2){
sims <- replicate(times, {
runner <- data.frame(Age=age, M.F=sex, Clima=clima, Local=fromBoston,  African=fromAfrica)
runner$X5K  <- predict(model$predX5, runner)
runner$X10K <- predict(model$predX10, runner)
runner$X15K <- predict(model$predX15, runner)
runner$X20K <- predict(model$predX20, runner)
runner$Half <- predict(model$predXHalf, runner)
runner$X25K <- predict(model$predX25, runner)
runner$X30K <- predict(model$predX30, runner)
runner$X35K <- predict(model$predX35, runner)
runner$X40K <- predict(model$predX40, runner)
t <- as.integer(predict(model$predFTime, runner) + rnorm(1, sd=60))
})
h <- dt(1-alpha/2, times-1)*sd(sims)/sqrt(times)
n2 <- ceiling(times*(h/h2)^2)
if (n2 - n >= 1) {
sims2 <- replicate(max(0, n2 - times), {
runner <- data.frame(Age=age, M.F=sex, Clima=clima, Local=fromBoston,
LocalCountry=froumUs, African=fromAfrica)
runner$X5K  <- predict(model$predX5, runner)
runner$X10K <- predict(model$predX10, runner)
runner$X15K <- predict(model$predX15, runner)
runner$X20K <- predict(model$predX20, runner)
runner$Half <- predict(model$predXHalf, runner)
runner$X25K <- predict(model$predX25, runner)
runner$X30K <- predict(model$predX30, runner)
runner$X35K <- predict(model$predX35, runner)
runner$X40K <- predict(model$predX40, runner)
t <- as.integer(predict(model$predFTime, runner) + rnorm(1, sd=60))
})
sims <- c(sims, sims2)
}
as.integer(mean(sims))
}
dataMarathon <- getDataMarathon()
model <- createModel(dataMarathon)
n <- 30
alpha <- 0.05
h2 <- 0.5
experiment1(model, n, alpha, h2)
experiment1 <- function(model,n, alpha, h2) {
#we fix age because we cannot select from more than the two valus. next exp, will decide which is the best age.
range <- c(-1, 1)
Age <- c('(18,28]', '(68,78]')
Gender <- c('M', 'F')
Weather <- c('Sun', 'Rain')
fromBoston <-  c('Boston', 'NoBoston')
fromAfrica <-  c('Africa', 'NoAfrica')
S <- lapply(range, function(A) {
lapply(range, function(G) {
lapply(range, function(AF) {
lapply(range, function(B) {
lapply(range, function(W) {
# data.frame(Age=age, M.F=sex, Clima=clima, Local=fromBoston,  African=fromAfrica)
s <- run.simulation(model,Age[A], Gender[G],Weather[W], fromBoston[B] ,fromAfrica[AF], n, alpha, h2)
names(s) <- paste0(ifelse(A == 1, '+', '-'),
ifelse(G == 1, '+', '-'),
ifelse(AF == 1, '+', '-'),
ifelse(B == 1, '+', '-'),
ifelse(W == 1, '+', '-'))
s
})
})
})
})
})
S <- c(S, recursive=TRUE)
df <- data.frame(Seconds=S, Hours=as.hours(S))
write.csv2(df, 'exp1.csv')
}
experiment2 <- function(model, n, alpha, h2) {
#In this case we are just iterating throught the only attribute we don't know which is the best yet htat is the age so we fix all the others.
Age <- c('(18,28]', '(28,38]', '(38,48]', '(48,58]', '(58,68]')
# data.frame(Age=age, M.F=sex, Clima=clima, Local=fromBoston,  African=fromAfrica)
S <- lapply(Age, function(A) {
s <- run.simulation(model,A, 'M','', '','<20', 'African',n, alpha, h2)
names(s) <- A
s
})
S <- c(S, recursive=TRUE)
df <- data.frame(Seconds=S, Hours=as.hours(S))
write.csv2(df, 'exp2.csv')
}
experiment1(model, n, alpha, h2)
experiment1 <- function(model,n, alpha, h2) {
#we fix age because we cannot select from more than the two valus. next exp, will decide which is the best age.
range <- c(-1, 1)
Age <- c('(18,28]', '(68,78]')
Gender <- c('M', 'F')
Weather <- c('Sun', 'Rain')
fromBoston <-  c('Boston', 'NoBoston')
fromAfrica <-  c('Africa', 'NoAfrica')
S <- lapply(range, function(A) {
lapply(range, function(G) {
lapply(range, function(AF) {
lapply(range, function(B) {
lapply(range, function(W) {
# data.frame(Age=age, M.F=sex, Clima=clima, Local=fromBoston,  African=fromAfrica)
s <- simulateExp(model,Age[A], Gender[G],Weather[W], fromBoston[B] ,fromAfrica[AF], n, alpha, h2)
names(s) <- paste0(ifelse(A == 1, '+', '-'),
ifelse(G == 1, '+', '-'),
ifelse(AF == 1, '+', '-'),
ifelse(B == 1, '+', '-'),
ifelse(W == 1, '+', '-'))
s
})
})
})
})
})
S <- c(S, recursive=TRUE)
df <- data.frame(Seconds=S, Hours=as.hours(S))
write.csv2(df, 'exp1.csv')
}
experiment2 <- function(model, n, alpha, h2) {
#In this case we are just iterating throught the only attribute we don't know which is the best yet htat is the age so we fix all the others.
Age <- c('(18,28]', '(28,38]', '(38,48]', '(48,58]', '(58,68]')
# data.frame(Age=age, M.F=sex, Clima=clima, Local=fromBoston,  African=fromAfrica)
S <- lapply(Age, function(A) {
s <- simulateExp(model,A, 'M','', '','<20', 'African',n, alpha, h2)
names(s) <- A
s
})
S <- c(S, recursive=TRUE)
df <- data.frame(Seconds=S, Hours=as.hours(S))
write.csv2(df, 'exp2.csv')
}
experiment1(model, n, alpha, h2)
simulateExp <- function(model, age, sex, clima, fromBoston, fromAfrica, times, alpha, h2){
sims <- replicate(times, {
runner <- data.frame(Age=age, M.F=sex, Clima=clima, Local=fromBoston,  African=fromAfrica)
runner$X5K  <- predict(model$predX5, runner)
runner$X10K <- predict(model$predX10, runner)
runner$X15K <- predict(model$predX15, runner)
runner$X20K <- predict(model$predX20, runner)
runner$Half <- predict(model$predXHalf, runner)
runner$X25K <- predict(model$predX25, runner)
runner$X30K <- predict(model$predX30, runner)
runner$X35K <- predict(model$predX35, runner)
runner$X40K <- predict(model$predX40, runner)
t <- as.integer(predict(model$predFTime, runner) + rnorm(1, sd=60))
})
h <- dt(1-alpha/2, times-1)*sd(sims)/sqrt(times)
n2 <- ceiling(times*(h/h2)^2)
if (n2 - n >= 1) {
sims2 <- replicate(max(0, n2 - times), {
runner <- data.frame(Age=age, M.F=sex, Clima=clima, Local=fromBoston, African=fromAfrica)
runner$X5K  <- predict(model$predX5, runner)
runner$X10K <- predict(model$predX10, runner)
runner$X15K <- predict(model$predX15, runner)
runner$X20K <- predict(model$predX20, runner)
runner$Half <- predict(model$predXHalf, runner)
runner$X25K <- predict(model$predX25, runner)
runner$X30K <- predict(model$predX30, runner)
runner$X35K <- predict(model$predX35, runner)
runner$X40K <- predict(model$predX40, runner)
t <- as.integer(predict(model$predFTime, runner) + rnorm(1, sd=60))
})
sims <- c(sims, sims2)
}
as.integer(mean(sims))
}
n <- 30
alpha <- 0.05
h2 <- 0.5
experiment1(model, n, alpha, h2)
df <- data.frame(Seconds=S)
write.csv2(df, 'exp1.csv')
experiment2 <- function(model, n, alpha, h2) {
#In this case we are just iterating throught the only attribute we don't know which is the best yet htat is the age so we fix all the others.
Age <- c('(18,28]', '(28,38]', '(38,48]', '(48,58]', '(58,68]')
# data.frame(Age=age, M.F=sex, Clima=clima, Local=fromBoston,  African=fromAfrica)
S <- lapply(Age, function(A) {
s <- simulateExp(model,A, 'M','', '','<20', 'African',n, alpha, h2)
names(s) <- A
s
})
S <- c(S, recursive=TRUE)
df <- data.frame(Seconds=S)
write.csv2(df, 'exp2.csv')
}
experiment1 <- function(model,n, alpha, h2) {
#we fix age because we cannot select from more than the two valus. next exp, will decide which is the best age.
range <- c(-1, 1)
Age <- c('(18,28]', '(68,78]')
Gender <- c('M', 'F')
Weather <- c('Sun', 'Rain')
fromBoston <-  c('Boston', 'NoBoston')
fromAfrica <-  c('Africa', 'NoAfrica')
S <- lapply(range, function(A) {
lapply(range, function(G) {
lapply(range, function(AF) {
lapply(range, function(B) {
lapply(range, function(W) {
# data.frame(Age=age, M.F=sex, Clima=clima, Local=fromBoston,  African=fromAfrica)
s <- simulateExp(model,Age[A], Gender[G],Weather[W], fromBoston[B] ,fromAfrica[AF], n, alpha, h2)
names(s) <- paste0(ifelse(A == 1, '+', '-'),
ifelse(G == 1, '+', '-'),
ifelse(AF == 1, '+', '-'),
ifelse(B == 1, '+', '-'),
ifelse(W == 1, '+', '-'))
s
})
})
})
})
})
S <- c(S, recursive=TRUE)
df <- data.frame(Seconds=S)
write.csv2(df, 'exp1.csv')
}
experiment1(model, n, alpha, h2)
experiment2(model, n, alpha, h2)
experiment2 <- function(model, n, alpha, h2) {
#In this case we are just iterating throught the only attribute we don't know which is the best yet htat is the age so we fix all the others.
Age <- c('(18,28]', '(28,38]', '(38,48]', '(48,58]', '(58,68]')
# data.frame(Age=age, M.F=sex, Clima=clima, Local=fromBoston,  African=fromAfrica)
S <- lapply(Age, function(A) {
s <- simulateExp(model,A, 'M','Sun', 'NoBoston','NoAfrica',n, alpha, h2)
names(s) <- A
s
})
S <- c(S, recursive=TRUE)
df <- data.frame(Seconds=S)
write.csv2(df, 'exp2.csv')
}
experiment2(model, n, alpha, h2)
